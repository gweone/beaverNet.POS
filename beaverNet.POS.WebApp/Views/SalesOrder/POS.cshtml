
@{
    ViewData["Title"] = "POS";
}

<h1>POS - Point of sales</h1>

<div class="row">
    <div class="col-md-4">
        <button onclick="initiateNewPOSOrder()" class="btn btn-block btn-success">Transaksi Baru</button>
        <br/>
    </div>
</div>

<div class="row">
    <div class="col-md-5">
        @await Html.PartialAsync("_DataTables", new SearchModel()
   {
       ApiUrl = Url.Content("/api/product"),
       Columns = new[] {
        new SearchColumn(){
            name = "Name",
            displayname = "Product"
        },
        new SearchColumn(){
            name = "PriceSell",
            displayname = "PriceSell",
            searchable = false
        },
        new SearchColumn(){
            name = "PricePurchase",
            displayname = "PricePurchase",
            searchable = false
        },
        new SearchColumn(){
            searchable = false,
            orderable = false,
            displayname = "Tindakan"
        }
    },
       ColumnDefinition = @"'columnDefs': [{
                    'targets': -1,
                    'data': null,
                    'orderable': false,
                    'searchable':false,
                    'render': function (data, type, row, meta) {
                        return '<button onclick=""selectProduct(this)"" data-id=""' + data[3] + '"" class=""btn btn-info"">Pilih</button>';
                    }
                }]"
   })
    </div>
    <div class="col-md-7">
        <div class="row" id="posform">
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Order Number #</label>
                    <input class="form-control" id="orderNumber" readonly />
                    <hidden id="salesOrderId"></hidden>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Product</label>
                    <input class="form-control" id="product" readonly />
                    <hidden id="productId"></hidden>
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Quantity</label>
                    <input type="number" class="form-control" id="quantity" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label class="control-label">Price</label>
                    <input type="number" class="form-control" id="price" />
                </div>
            </div>
        </div>
        <div class="row btn-posform d-none">
            <div class="col-md-4">
                <button onclick="posLineInsert()" class="btn btn-block btn-warning">Tambah</button>
                <br/>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <table class="table" id="posLine" style="width:100%">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">Product</th>
                            <th scope="col">Price</th>
                            <th scope="col">Qty</th>
                            <th scope="col">SubTotal</th>
                            <th scope="col">Disc.</th>
                            <th scope="col">Total</th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label">Total</label>
                    <div class="input-group">
                        <span class="input-group-text">Rp</span>
                        <input class="form-control" id="total" readonly />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label">Pembayaran</label>
                    <div class="input-group">
                        <span class="input-group-text">Rp</span>
                        <input type="number" class="form-control" id="payment" />
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label class="control-label">Kembali</label>
                    <div class="input-group">
                        <span class="input-group-text">Rp</span>
                        <input class="form-control" id="change" readonly />
                    </div>
                </div>
            </div>
        </div>
        <div class="row payment d-none">
            <div class="col-md-12 text-right">
                <a class="btn btn-success btn-payment" asp-action="Payment">Lunas</a>
            </div>
        </div>
    </div>
</div>

@section Styles{
    <!--numpad-->
    <link rel="stylesheet" href="~/lib/jquerey-numpad/jquery.numpad.css" />
    <!--numpad-->
    <style type="text/css">
        .nmpd-grid {
            border: none;
            padding: 20px;
            background: white;
        }

            .nmpd-grid > tbody > tr > td {
                border: none;
            }
    </style>
}

@section Scripts{
    <script>
        // These defaults will be applied to all NumPads within this document!
        $.fn.numpad.defaults.gridTpl = '<table class="table modal-content"></table>';
        $.fn.numpad.defaults.backgroundTpl = '<div class="modal-backdrop in"></div>';
        $.fn.numpad.defaults.displayTpl = '<input type="text" class="form-control" />';
        $.fn.numpad.defaults.buttonNumberTpl = '<button type="button" class="btn btn-default"></button>';
        $.fn.numpad.defaults.buttonFunctionTpl = '<button type="button" class="btn" style="width: 100%;"></button>';
        $.fn.numpad.defaults.onKeypadCreate = function () { $(this).find('.done').addClass('btn-primary'); };
        // jquery numpad

        $(document).ready(function () {
            //numpad
            $('#quantity').numpad();
            $('#price').numpad();
            $('#payment').on('change', function () {
                var total = parseInt($('#total').val());
                var payment = parseInt($('#payment').val());
                $('#change').val(total - payment);
            }).numpad();

        });

        function initPosLine() {
            var salesOrderId = $("#salesOrderId").val();
            $('.btn-posform').removeClass('d-none');
            $("#posLine").DataTable({
                "destroy": true,
                "ajax": {
                    "type": "GET",
                    "url": "/api/SalesOrderLine/GetLines?salesOrderId=" + salesOrderId + "",
                    "dataSrc": function (data) {

                        return data.lines
                    }
                },
                "columns": [
                    { "data": "product.name" },
                    {
                        "data": "price",
                        "render": function (data) {
                            var formatter = new Intl.NumberFormat('id-ID', {
                                style: 'currency',
                                currency: 'IDR',

                                // These options are needed to round to whole numbers if that's what you want.
                                minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
                                //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
                            });
                            return formatter.format(data);
                        } },
                    { "data": "quantity" },
                    {
                        "data": "subTotal",
                        "render": function (data) {
                            var formatter = new Intl.NumberFormat('id-ID', {
                                style: 'currency',
                                currency: 'IDR',

                                // These options are needed to round to whole numbers if that's what you want.
                                minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
                                //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
                            });
                            return formatter.format(data);
                        } },
                    {
                        "data": "discount",
                        "render": function (data) {
                            var formatter = new Intl.NumberFormat('id-ID', {
                                style: 'currency',
                                currency: 'IDR',

                                // These options are needed to round to whole numbers if that's what you want.
                                minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
                                //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
                            });
                            return formatter.format(data);
                        } },
                    {
                        "data": "total",
                        "render": function (data) {
                            var formatter = new Intl.NumberFormat('id-ID', {
                                style: 'currency',
                                currency: 'IDR',

                                // These options are needed to round to whole numbers if that's what you want.
                                minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)
                                //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)
                            });
                            return formatter.format(data);
                        }
                    },
                    {
                        "data": "salesOrderLineId",
                        "render": function (data) {
                            var btnDelete = '<button onclick="deleteLine(\'' + data + '\')" class="btn btn-danger">DELETE</button>';
                            return btnDelete;
                        }
                    }
                ],
                "language": {
                    "emptyTable": "data is empty."
                },
                "lengthChange": false,
                "bFilter": false,
                "paging": false,
                "info": false,
                "createdRow": function (row, data, dataIndex) {
                    $('#total').val(data['total'] + parseInt($('#total').val()));
                }
            });

            return false;
        }

        function selectProduct(el) {
            var productId = $(el).data('id');
            var salesOrderNumber = $("#orderNumber").val();
            if (salesOrderNumber) {

                axios.get('/api/Product/' + productId
                )
                    .then(function (response) {
                        $("#productId").val(response.data.productId);
                        $("#product").val(response.data.name);
                        $("#price").val(response.data.priceSell);
                        $("#quantity").val(1);
                        toastr.success(response.data.name + ' is selected.', 'Success');
                        scrollTo($('#posform').position().left, $('#posform').position().top);
                    })
                    .catch(function (error) {

                    })
                    .then(function () {

                    });

            } else {
                toastr.error('Order Number # empty. Please Buat Baru order first.', 'Error')
            }

            return false;
        }

        function initiateNewPOSOrder() {
            axios.post('/api/SalesOrder/InitiateNewPOSTrans'
            )
                .then(function (response) {
                    $("#orderNumber").val(response.data.number);
                    $("#salesOrderId").val(response.data.salesOrderId);
                    initPosLine();
                    toastr.success('New order created with number: ' + response.data.number, 'Success');

                })
                .catch(function (error) {

                })
                .then(function () {

                });
            return false;
        }

        function posLineInsert() {
            axios.post('/api/SalesOrderLine', {
                "SalesOrderId": $("#salesOrderId").val(),
                "ProductId": $("#productId").val(),
                "Quantity": $("#quantity").val(),
                "Price": $("#price").val()
            })
                .then(function (response) {
                    var product = $("#product").val();
                    $("#total").val(0);
                    $("#posLine").DataTable().ajax.reload();
                    toastr.success('Insert POS line success for item: ' + product, 'Success');
                    $('.payment').removeClass('d-none');
                    $('.payment .btn-payment').attr('href', '/SalesOrder/Payment/' + $("#salesOrderId").val());
                })
                .catch(function (error) {

                })
                .then(function () {

                });
            return false;
        }

    </script>
}

